---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SZS.
--- DateTime: 23.04.2022 21:32
---

local Class = require('lib/Class')
local RobotApi = require("robot")
local Computer = require('computer')
local Position = require('lib/Position')

RobotApi.class = "Class Native.RobotApi"
Computer.class = "Class Native.Component.Computer"
local Robot = Class:extended(Computer):extended(RobotApi):extended({ class = "Class Robot" })

function Robot:new(initTable)
    local instance = self.super:new()
    return self:extendedInstance(instance):init(initTable)
end

-- startPosition {0,0,0,0} x,y,z,r / r : Position.side
function Robot:init(initTable)
    Robot.position = Position:new(table.unpack(initTable.startPosition))
    Robot.buildWorker = initTable.buildWorker
    Robot.baseStation = initTable.baseStation
    Robot.inventoryManager = initTable.toolManager
end

-- local result, error = robot_api.forward()
--     if not result then
--         for i = 1, 100 do
--             robot_api.swing()
--             result, error = robot_api.forward()
--             if result then
--                 self.gps:forward()
--                 break
--             end
--         end
--     else
--         self.gps:forward()
--     end
--     if not result then
--         os.exit('no forward')
--     end
--     return result, error

-- tries false or nil = loop
function Robot:forward(removeObstacle, tries)
    local result, error = self.super:forward()
    if not result and removeObstacle then
        while not tries or tries > 0 do
            self:swing()
        end
    end
    return result, error   
end

function Robot:swing()
    
end

return Robot